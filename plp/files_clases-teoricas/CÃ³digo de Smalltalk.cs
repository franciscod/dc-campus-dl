'From Pharo1.4 of 18 April 2012 [Latest update: #14438] on 29 June 2012 at 4:08:21 pm'!DynamicMessageImplementor subclass: #ForwardingMessageImplementor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MetaprogramacionExamples'!Object subclass: #CachedOrderedCollection	instanceVariableNames: 'content indexBlock index'	classVariableNames: ''	poolDictionaries: ''	category: 'MetaprogramacionExamples'!Object subclass: #Customer	instanceVariableNames: 'cuit name'	classVariableNames: ''	poolDictionaries: ''	category: 'MetaprogramacionExamples'!!ForwardingMessageImplementor methodsFor: 'code generation' stamp: 'HernanWilkinson 10/10/2011 22:29'!writeForwarding	| messageName |		messageName := stream contents.	stream 		cr;		tab;		nextPutAll: '^ content ';		nextPutAll: messageName 		! !!ForwardingMessageImplementor methodsFor: 'code generation' stamp: 'HernanWilkinson 10/10/2011 22:28'!writeSourceCode	self writeMethodName.	self writeForwarding.	! !!BlockClosure methodsFor: '*metaprogramacionexamples' stamp: 'HAW 6/26/2012 18:52'!whileTrue1: aBlock 	"Ordinarily compiled in-line, and therefore not overridable.	This is in case the message is sent to other than a literal block.	Evaluate the argument, aBlock, as long as the value of the receiver is true."	^ self value ifTrue: [		aBlock value.		thisContext restart ]! !!CachedOrderedCollection methodsFor: 'add/remove' stamp: 'HernanWilkinson 10/10/2011 22:22'!add: anObject		index 		at: (self keyOf: anObject) 		put: anObject.		^ content add: anObject ! !!CachedOrderedCollection methodsFor: 'add/remove' stamp: 'HernanWilkinson 10/10/2011 22:19'!at: aKey	^ index at: aKey ! !!CachedOrderedCollection methodsFor: 'add/remove' stamp: 'HernanWilkinson 10/10/2011 22:22'!keyOf: anObject	^ indexBlock value: anObject ! !!CachedOrderedCollection methodsFor: 'add/remove' stamp: 'HernanWilkinson 10/10/2011 22:23'!remove: anObject	content remove: anObject.	index removeKey:  (self keyOf: anObject) .		^ anObject ! !!CachedOrderedCollection methodsFor: 'learning' stamp: 'HernanWilkinson 10/10/2011 22:38'!compileForwadingFor: aMessage		self class compile: (ForwardingMessageImplementor for: aMessage in: self class) value	! !!CachedOrderedCollection methodsFor: 'learning' stamp: 'HAW 6/26/2012 19:52'!doesNotUnderstand: aMessage	self compileForwadingFor: aMessage.		^ aMessage sendTo: self  ! !!CachedOrderedCollection methodsFor: 'initialization' stamp: 'HernanWilkinson 10/10/2011 22:18'!initializeOf: anOrderedCollection indexingWith: aBlock	content := anOrderedCollection.	indexBlock := aBlock.	index := Dictionary new.! !!CachedOrderedCollection class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/10/2011 22:18'!of: anOrderedCollection indexingWith: aBlock	^ self new initializeOf: anOrderedCollection indexingWith: aBlock! !!Customer methodsFor: 'cuit' stamp: 'HernanWilkinson 10/10/2011 22:36'!cuit	^ cuit ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/10/2011 22:35'!initializeWithCuit: aCuit	cuit := aCuit   ! !!Customer methodsFor: 'printing' stamp: 'HernanWilkinson 10/10/2011 22:37'!printOn: aStream	aStream 		nextPutAll: 'Customer with CUIT: ';		nextPutAll: cuit  ! !!Customer class methodsFor: 'EXAMPLE' stamp: 'HernanWilkinson 10/10/2011 22:46'!example| aCustomer customers |Customer addInstVarNamed: 'address'."Customer.addInstVarNamed('address');"aCustomer := Customer withCuit: '22-24556789-0' .aCustomer address: 'Corrientes 2211'."aCustomer = new Customer('22-24556789-0');aCustomer.setAddress('Corrientes 2211');"aCustomer address."aCustomer.getAddress();"Customer compile: 'city ^#BuenosAires'aCustomer city."----------------------"customers := CachedOrderedCollection of: OrderedCollection new indexingWith: [ :customer | customer cuit ].customers add: (Customer withCuit: '23-22443232-9').customers add: (Customer withCuit: '27-25443232-8').customers at: '23-22443232-9'.customers at: '27-25443232-8'.customers select: [ : customer | customer cuit beginsWith: '23'  ].customers collect: [ :customer | customer cuit ].customers detect: [:customer | customer cuit beginsWith: '2'  ].! !!Customer class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/10/2011 22:35'!withCuit: aCuit	^ self new initializeWithCuit: aCuit! !